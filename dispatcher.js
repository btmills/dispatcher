// Generated by CoffeeScript 1.6.3
(function() {
  var Dispatcher;

  Dispatcher = function() {
    return function() {
      var events, filters, match, pub, sub;
      events = {};
      filters = [];
      match = function(pattern, candidate) {
        var key;
        if (typeof pattern !== 'object') {
          return true;
        }
        if (typeof candidate !== 'object') {
          return false;
        }
        for (key in pattern) {
          if (!pattern.hasOwnProperty(key)) {
            continue;
          }
          if (!candidate.hasOwnProperty(key)) {
            return false;
          }
          if (['string', 'number', 'boolean'].indexOf(typeof pattern[key] >= 0)) {
            if (pattern[key] !== candidate[key]) {
              return false;
            }
          } else if (pattern[key] instanceof RegExp && !pattern[key].test(candidate[key])) {
            return false;
          } else if (typeof pattern[key] === 'object' && typeof candidate[key] === 'object' && !match(pattern[key], candidate[key])) {
            return false;
          }
        }
        return true;
      };
      /*
      	Publish event e, with optional data
      */

      pub = function(e, data) {
        if (events[e]) {
          events[e].forEach(function(el) {
            if (match(el.pattern, data)) {
              return el.callback.call(null, data, e);
            }
          });
        }
        return filters.forEach(function(el) {
          if (el.test(e && match(el.pattern, data))) {
            return el.callback.call(null, data, e);
          }
        });
      };
      /*
      	Subscribe to an event
      	e is either a string literal, or a RegExp.
      	pattern is an object pattern.
      */

      sub = function(e, pattern, cb) {
        if (arguments.length < 3) {
          cb = pattern;
          pattern = void 0;
        }
        if (typeof e === 'string') {
          if (!Array.isArray(events[e])) {
            events[e] = [];
          }
          return events[e].push({
            pattern: pattern,
            callback: cb
          });
        } else if (e instanceof RegExp) {
          return filters.push({
            test: function() {
              return e.test.apply(e, arguments);
            },
            pattern: pattern,
            callback: cb
          });
        }
      };
      /*
      	No unsub function because I don't anticipate needing it.
      	This has changed. I will add one. Eventually.
      */

      return {
        pub: pub,
        sub: sub
      };
    };
  };

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(factory);
    } else if (typeof exports === 'object') {
      return module.exports = factory();
    } else {
      return root.Dispatcher = factory();
    }
  })(this, Dispatcher);

}).call(this);
